// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/16/2020 12:44:07"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          Signature_analyzer
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Signature_analyzer_vlg_vec_tst();
// constants                                           
// general purpose registers
reg Clock;
reg Reset;
reg [4:0] y;
// wires                                               
wire [4:0] Out;

// assign statements (if any)                          
Signature_analyzer i1 (
// port map - connection between master ports and signals/registers   
	.Clock(Clock),
	.Out(Out),
	.Reset(Reset),
	.y(y)
);
initial 
begin 
#1000000 $finish;
end 

// Clock
initial
begin
	Clock = 1'b0;
	Clock = #40000 1'b1;
	# 40000;
	repeat(2)
	begin
		Clock = 1'b0;
		Clock = #40000 1'b1;
		# 40000;
	end
	Clock = 1'b0;
end 

// Reset
initial
begin
	Reset = 1'b1;
	Reset = #10000 1'b0;
end 
// y[ 4 ]
initial
begin
	y[4] = 1'b0;
	y[4] = #30000 1'b1;
	y[4] = #20000 1'b0;
end 
// y[ 3 ]
initial
begin
	y[3] = 1'b0;
	y[3] = #30000 1'b1;
	y[3] = #20000 1'b0;
	y[3] = #60000 1'b1;
	y[3] = #20000 1'b0;
end 
// y[ 2 ]
initial
begin
	y[2] = 1'b0;
	y[2] = #110000 1'b1;
	y[2] = #20000 1'b0;
end 
// y[ 1 ]
initial
begin
	y[1] = 1'b0;
end 
// y[ 0 ]
initial
begin
	y[0] = 1'b0;
	y[0] = #190000 1'b1;
	y[0] = #20000 1'b0;
end 
endmodule

